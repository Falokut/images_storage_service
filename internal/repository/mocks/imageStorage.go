// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageStorage is a mock of ImageStorage interface.
type MockImageStorage struct {
	ctrl     *gomock.Controller
	recorder *MockImageStorageMockRecorder
}

// MockImageStorageMockRecorder is the mock recorder for MockImageStorage.
type MockImageStorageMockRecorder struct {
	mock *MockImageStorage
}

// NewMockImageStorage creates a new mock instance.
func NewMockImageStorage(ctrl *gomock.Controller) *MockImageStorage {
	mock := &MockImageStorage{ctrl: ctrl}
	mock.recorder = &MockImageStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageStorage) EXPECT() *MockImageStorageMockRecorder {
	return m.recorder
}

// DeleteImage mocks base method.
func (m *MockImageStorage) DeleteImage(ctx context.Context, imageID, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, imageID, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockImageStorageMockRecorder) DeleteImage(ctx, imageID, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockImageStorage)(nil).DeleteImage), ctx, imageID, category)
}

// GetImage mocks base method.
func (m *MockImageStorage) GetImage(ctx context.Context, imageID, category string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, imageID, category)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockImageStorageMockRecorder) GetImage(ctx, imageID, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageStorage)(nil).GetImage), ctx, imageID, category)
}

// IsImageExist mocks base method.
func (m *MockImageStorage) IsImageExist(ctx context.Context, imageID, category string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsImageExist", ctx, imageID, category)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsImageExist indicates an expected call of IsImageExist.
func (mr *MockImageStorageMockRecorder) IsImageExist(ctx, imageID, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsImageExist", reflect.TypeOf((*MockImageStorage)(nil).IsImageExist), ctx, imageID, category)
}

// RewriteImage mocks base method.
func (m *MockImageStorage) RewriteImage(ctx context.Context, img []byte, filename, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RewriteImage", ctx, img, filename, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// RewriteImage indicates an expected call of RewriteImage.
func (mr *MockImageStorageMockRecorder) RewriteImage(ctx, img, filename, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewriteImage", reflect.TypeOf((*MockImageStorage)(nil).RewriteImage), ctx, img, filename, category)
}

// SaveImage mocks base method.
func (m *MockImageStorage) SaveImage(ctx context.Context, img []byte, filename, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImage", ctx, img, filename, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveImage indicates an expected call of SaveImage.
func (mr *MockImageStorageMockRecorder) SaveImage(ctx, img, filename, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockImageStorage)(nil).SaveImage), ctx, img, filename, category)
}
