// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// IncBytesUploaded mocks base method.
func (m *MockMetrics) IncBytesUploaded(bytesUploaded int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncBytesUploaded", bytesUploaded)
}

// IncBytesUploaded indicates an expected call of IncBytesUploaded.
func (mr *MockMetricsMockRecorder) IncBytesUploaded(bytesUploaded interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncBytesUploaded", reflect.TypeOf((*MockMetrics)(nil).IncBytesUploaded), bytesUploaded)
}

// MockImagesStorageService is a mock of ImagesStorageService interface.
type MockImagesStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockImagesStorageServiceMockRecorder
}

// MockImagesStorageServiceMockRecorder is the mock recorder for MockImagesStorageService.
type MockImagesStorageServiceMockRecorder struct {
	mock *MockImagesStorageService
}

// NewMockImagesStorageService creates a new mock instance.
func NewMockImagesStorageService(ctrl *gomock.Controller) *MockImagesStorageService {
	mock := &MockImagesStorageService{ctrl: ctrl}
	mock.recorder = &MockImagesStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImagesStorageService) EXPECT() *MockImagesStorageServiceMockRecorder {
	return m.recorder
}

// DeleteImage mocks base method.
func (m *MockImagesStorageService) DeleteImage(ctx context.Context, imageId, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, imageId, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockImagesStorageServiceMockRecorder) DeleteImage(ctx, imageId, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockImagesStorageService)(nil).DeleteImage), ctx, imageId, category)
}

// GetImage mocks base method.
func (m *MockImagesStorageService) GetImage(ctx context.Context, imageId, category string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", ctx, imageId, category)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImage indicates an expected call of GetImage.
func (mr *MockImagesStorageServiceMockRecorder) GetImage(ctx, imageId, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImagesStorageService)(nil).GetImage), ctx, imageId, category)
}

// IsImageExist mocks base method.
func (m *MockImagesStorageService) IsImageExist(ctx context.Context, imageId, category string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsImageExist", ctx, imageId, category)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsImageExist indicates an expected call of IsImageExist.
func (mr *MockImagesStorageServiceMockRecorder) IsImageExist(ctx, imageId, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsImageExist", reflect.TypeOf((*MockImagesStorageService)(nil).IsImageExist), ctx, imageId, category)
}

// RewriteImage mocks base method.
func (m *MockImagesStorageService) RewriteImage(ctx context.Context, img []byte, imageId, category string, createImageIfNotExist bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RewriteImage", ctx, img, imageId, category, createImageIfNotExist)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RewriteImage indicates an expected call of RewriteImage.
func (mr *MockImagesStorageServiceMockRecorder) RewriteImage(ctx, img, imageId, category, createImageIfNotExist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RewriteImage", reflect.TypeOf((*MockImagesStorageService)(nil).RewriteImage), ctx, img, imageId, category, createImageIfNotExist)
}

// SaveImage mocks base method.
func (m *MockImagesStorageService) SaveImage(ctx context.Context, img []byte, category string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImage", ctx, img, category)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveImage indicates an expected call of SaveImage.
func (mr *MockImagesStorageServiceMockRecorder) SaveImage(ctx, img, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockImagesStorageService)(nil).SaveImage), ctx, img, category)
}
